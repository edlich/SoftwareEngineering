# DVCS - DISTRIBUTED VERSION CONTROL SYSTEMS

(C) Prof. Dr. Stefan Edlich

--- 

**INTRODUCTION**

Software development projects are almost always developed in a team.

The process of build and integration management must be handled (as discussed in the previous learning units). As is well known, software (unfortunately) almost always contains errors or features are missing. These errors must be managed, managed and documented and must not be lost in everyday business. In some cases it is even necessary to go back to an earlier version of the software. Experimenting with the code may also make it necessary to go back to previous versions. The essential and nowadays also simple version management is one of the most important tools in software engineering for managing the code in all variants.

LEARNING GOALS
learning goals

The aim of this learning unit is to understand the concepts of version and error management and to be able to use the two best-known systems in practice.

**OUTLINE**

Structure of the learning unit

* Basics of version management
* Requirements and benefits
* Examples under Eclipse
* subversion
* Error management

You will need approximately 120 minutes to complete this learning unit. It also takes 120 minutes to solve the exercises.

---

## LITERATURE DVC

> **DEFINITION** Git is a version control program that can track, manage, and share entire directory trees. GitHub is a web service that acts as a Git host (sometimes free) and can share it with interested parties.

After Make, RCS and CVS were the market leaders in Subversion for a long time at the beginning of the millennium (33.4% in 2009 according to Forrester Research), Git has taken the lead.

With GitHub and GitLab - to name just two of many hundreds - PaaS services (Platform as a Service) have been created, which usually offer free storage space and thus enable you to get started immediately and free of charge. Bitbucket has even offered both Git and Mercurial protocols since 2012 to avoid the question of which system is better.

The advantages of developing with Git and under the PaaS GitHub are highlighted by several facts:

* Back in 2012, GitHub received $100 million in venture capital.
* Countless companies and projects rely on GitHub: Facebook, Twitter, Microsoft (!), vmware, redhat, LinkedIn, Mozilla, Android, Debian, Eclipse, jQuery, Lunix, PostgreSQL, RubyOnRails

Here's a typical programmer's perspective describing what GitHub is today:

> **QUOTE**: “What do you think of GitHub?” “It started as a place for mothballing unmaintained and unnecessary projects, and that is still most of what is hosted there. But it’s turned into a kind of **World of Warcraft universe for programmers**, where they are ranked by their commits and which projects they have trunk privileges on. I read about a recruiting company built around the idea that GitHub reputation means something, so I guess if you aren’t committing to GitHub you won’t be getting a job at the coolest startups. The good old days of writing FizzBuzz and moving Mt. Fuji during your interview are over.” Linus Torvalds

GitHub has become the Facebook for coders to collaborate, follow, rate, or contribute.

**References**

* Git (http://git-scm.com)
* “git help”
* Github (http://github.com)
* Reference Documentation (https://git-scm.com/docs)
* Book and Videos (https://git-scm.com/doc)

**Books**

* Travis Swicegood, “Git,” The Pragmatic Bookshelf, 2010, ISBN-13: 978-1-934356-72-2
* Scott Chacon, “Pro Git” (free + online) https://git-scm.com/book/en/v2

Ten Things You Didn't Know about Github and Git https://owenou.com/ten-things-you-didnt-know-git-and-github-could-do/

---

## INTRODUCTION AND CONTINUOUS INTEGRATION
